[gd_resource type="VisualShader" load_steps=12 format=3 uid="uid://crx52mdtt63ua"]

[ext_resource type="Script" uid="uid://cg6b033msi1fg" path="res://addons/vs_plugin/utility/lerpframe.gd" id="1_qm7y4"]
[ext_resource type="Script" uid="uid://cps6313bdh0w3" path="res://addons/vs_plugin/utility/flipbook.gd" id="2_ktn1p"]

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_y3jpk"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_hn860"]
parameter_name = "TexFlowMap"
texture_type = 2
texture_repeat = 2

[sub_resource type="VisualShaderNodeVaryingGetter" id="VisualShaderNodeVaryingGetter_ohkpw"]
varying_name = "LerpFrameData"
varying_type = 4

[sub_resource type="VisualShaderNodeReroute" id="VisualShaderNodeReroute_acuch"]
default_input_values = [0, Vector4(0, 0, 0, 0)]
port_type = 5

[sub_resource type="VisualShaderNodeReroute" id="VisualShaderNodeReroute_nd646"]
port_type = 8

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_j4rjd"]
parameter_name = "TexFlipbook"
texture_type = 1
texture_repeat = 2

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_0eu60"]
initialized = true
script = ExtResource("1_qm7y4")

[sub_resource type="VisualShaderNodeVaryingSetter" id="VisualShaderNodeVaryingSetter_11qbe"]
varying_name = "LerpFrameData"
varying_type = 4

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_hhws3"]
default_input_values = [1, 1.0]
initialized = true
script = ExtResource("2_ktn1p")

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded, shadows_disabled;


// Varyings
varying vec3 var_LerpFrameData;

uniform sampler2D TexFlipbook : source_color, repeat_disable;
uniform sampler2D TexFlowMap : hint_normal, repeat_disable;


// Flipbook
/*
*	References:
*		https://github.com/Arnklit/godot_particle_flipbook_smoothing
*/


// render_mode unshaded, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx;

// uniform sampler2D flipbook_tex : source_color,filter_linear_mipmap,repeat_disable;
// uniform sampler2D flow_tex : hint_normal,filter_linear_mipmap,repeat_disable;

uniform bool _invert_x = false;
uniform bool _invert_y = false;

uniform bool _limit_frames = false;
uniform float _max_frames = 0.0;

uniform bool _anim_loop = false;
uniform bool _particle_anim = true;

uniform int _number_of_columns = 3;
uniform int _number_of_rows = 3;


void fLiPBook(vec2 _i_uv, float _playback_rate, vec4 _instance_custom, float _time, out vec2 _result_uv, out vec3 _lerpframe_data) {
	float total_frames = float(_number_of_columns * _number_of_rows);
	float h_frames = float(_number_of_columns);
	float v_frames = float(_number_of_rows);
	float current_frame;

	if (_particle_anim) {
		current_frame = floor(_instance_custom.z * total_frames);
	} else {
		current_frame = floor(_playback_rate * _time * total_frames);
	}

	if (!_limit_frames) {
		if (!_anim_loop) {
			// Clamp the frame within the valid frame range
			current_frame = clamp(current_frame, 0.0, total_frames - 1.0);
		} else {
			// Use modulo to wrap the frame within the range
			current_frame = mod(current_frame, total_frames);
		}
	} else {
		if (!_anim_loop) {
			current_frame = clamp(current_frame, 0.0, _max_frames - 1.0);
		} else {
			current_frame = mod(current_frame, _max_frames);
		}
	}

	if (_invert_x) {
		_i_uv.x = 1.0 - _i_uv.x;
	}
	if (_invert_y) {
		_i_uv.y = 1.0 - _i_uv.y;
	}

	// Scale down the base UV coordinates based on the number of columns and rows
	_i_uv /= vec2(h_frames, v_frames);
	
	vec2 next_uv = _i_uv;
	next_uv += vec2(mod(current_frame + 1.0, h_frames) / h_frames, floor((current_frame + 1.0 + 0.5) / h_frames) / v_frames);
	
	float lerpfactor = fract(_instance_custom.y * h_frames * v_frames);
	
	// Adjusts the UV coordinates based on the current frame position in the flipbook texture
	_i_uv += vec2(mod(current_frame, h_frames) / h_frames, floor((current_frame + 0.5) / h_frames) / v_frames);

	_result_uv = _i_uv;
	_lerpframe_data.x = lerpfactor;
	_lerpframe_data.yz = next_uv;
}


// void lerPframe(vec2 _uv_in, vec4 _color_in, vec3 _lerpframe_data, sampler2D _albedo_in, sampler2D _flow_in, out vec4 _albedo_out) {
// 	float timer = _lerpframe_data.x;
// 	vec2 next_uv = _lerpframe_data.yz;
	
// 	vec4 albedo_tex;
// 	if (_enable_flowmap) {
// 		vec2 flow_tex = texture(_flow_in, _uv_in).rg;
// 		flow_tex -= 0.5;
// 		flow_tex *= 2.0;
// 		vec2 flow_uv = _uv_in + flow_tex * timer * -_flow_strength;
// 		vec2 reverse_flow_uv = next_uv + flow_tex * (1.0 - timer) * _flow_strength;
// 		albedo_tex = mix(texture(_albedo_in, flow_uv), texture(_albedo_in, reverse_flow_uv), timer);
// 	} else {
// 		albedo_tex = texture(_albedo_in, _uv_in);
// 	}

// 	albedo_tex *= _color_in;
	
// 	_albedo_out.rgb = _albedo.rgb * albedo_tex.rgb;
// 	_albedo_out.a *= _albedo.a * albedo_tex.a;

// }


// void vertex() {
// 	vec2 ouv;
// 	vec3 framelerp_data;
// 	//float timer;
// 	fLiPBook(UV, 1.0, INSTANCE_CUSTOM, TIME, ouv, framelerp_data);
// 	//_timer = framelerp_data.x;
// 	//_next_uv = framelerp_data.yz;
// 	data = framelerp_data;
// 	 UV = ouv;
// }

// void fragment() {
	
// 	vec4 albedo_tex;

// 	lerPframe(UV, COLOR, data, flipbookTex, texture_flow, albedo_tex);

// 	albedo_tex *= COLOR;
	
// 	ALBEDO = _albedo.rgb * albedo_tex.rgb;
// 	ALPHA *= _albedo.a * albedo_tex.a;
// }

// LerpFrame
/*
*	References:
*		https://github.com/Arnklit/godot_particle_flipbook_smoothing
*/


uniform vec4 _albedo : source_color = vec4(1.0);
uniform bool _enable_flowmap = true;
uniform float _flow_strength : hint_range(0.0, 0.08, 0.001) = 0.015;

void lerPframe(vec2 _uv_in, vec4 _color_in, vec3 _lerpframe_data, sampler2D _albedo_in, sampler2D _flow_in, out vec4 _albedo_out) {
	float lerpfactor = _lerpframe_data.x;
	vec2 next_uv = _lerpframe_data.yz;
	
	vec4 albedo_tex;
	if (_enable_flowmap) {
		vec2 flow_tex = texture(_flow_in, _uv_in).rg;
		flow_tex -= 0.5;
		flow_tex *= 2.0;
		vec2 flow_uv = _uv_in + flow_tex * lerpfactor * -_flow_strength;
		vec2 reverse_flow_uv = next_uv + flow_tex * (1.0 - lerpfactor) * _flow_strength;
		albedo_tex = mix(texture(_albedo_in, flow_uv), texture(_albedo_in, reverse_flow_uv), lerpfactor);
	} else {
		albedo_tex = texture(_albedo_in, _uv_in);
	}

	albedo_tex *= _color_in;
	
	_albedo_out.rgb = _albedo.rgb * albedo_tex.rgb;
	_albedo_out.a *= _albedo.a * albedo_tex.a;

}

void vertex() {
	vec2 n_out6p0;
	vec3 n_out6p1;
// Flipbook:6
	float n_in6p1 = 1.00000;
	{
		fLiPBook(UV, n_in6p1, INSTANCE_CUSTOM, TIME, n_out6p0, n_out6p1);
	}


// Output:0
	UV = n_out6p0;


// VaryingSetter:5
	var_LerpFrameData = n_out6p1;


}

void fragment() {
// VaryingGetter:12
	vec3 n_out12p0 = var_LerpFrameData;


	vec4 n_out9p0;
// LerpFrame:9
	{
		lerPframe(UV, COLOR, n_out12p0, TexFlipbook, TexFlowMap, n_out9p0);
	}


// Reroute:13
	vec4 n_out13p0 = n_out9p0;


// VectorDecompose:10
	float n_out10p0 = n_out9p0.x;
	float n_out10p1 = n_out9p0.y;
	float n_out10p2 = n_out9p0.z;
	float n_out10p3 = n_out9p0.w;


// Output:0
	ALBEDO = vec3(n_out13p0.xyz);
	ALPHA = n_out10p3;


}
"
graph_offset = Vector2(-331.377, -280.88)
flags/unshaded = true
flags/shadows_disabled = true
varyings/LerpFrameData = "0,4"
nodes/vertex/0/position = Vector2(540, 140)
nodes/vertex/5/node = SubResource("VisualShaderNodeVaryingSetter_11qbe")
nodes/vertex/5/position = Vector2(100, 400)
nodes/vertex/6/node = SubResource("VisualShaderNodeCustom_hhws3")
nodes/vertex/6/position = Vector2(-280, 140)
nodes/vertex/connections = PackedInt32Array(6, 0, 0, 4, 6, 1, 5, 0)
nodes/fragment/0/position = Vector2(1700, 200)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_j4rjd")
nodes/fragment/3/position = Vector2(40, 240)
nodes/fragment/9/node = SubResource("VisualShaderNodeCustom_0eu60")
nodes/fragment/9/position = Vector2(860, 620)
nodes/fragment/10/node = SubResource("VisualShaderNodeVectorDecompose_y3jpk")
nodes/fragment/10/position = Vector2(1320, 540)
nodes/fragment/11/node = SubResource("VisualShaderNodeTexture2DParameter_hn860")
nodes/fragment/11/position = Vector2(40, 760)
nodes/fragment/12/node = SubResource("VisualShaderNodeVaryingGetter_ohkpw")
nodes/fragment/12/position = Vector2(500, 420)
nodes/fragment/13/node = SubResource("VisualShaderNodeReroute_acuch")
nodes/fragment/13/position = Vector2(1240, 220)
nodes/fragment/14/node = SubResource("VisualShaderNodeReroute_nd646")
nodes/fragment/14/position = Vector2(620, 1080)
nodes/fragment/connections = PackedInt32Array(9, 0, 10, 0, 10, 3, 0, 1, 3, 0, 9, 1, 12, 0, 9, 0, 9, 0, 13, 0, 13, 0, 0, 0, 11, 0, 14, 0, 14, 0, 9, 2)
