[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://dxdk4r04vygms"]

[ext_resource type="Texture2D" uid="uid://c5qjfqrtx5ud1" path="res://textures/texture_rock_albedo.png" id="1_g35qb"]
[ext_resource type="Script" uid="uid://d4kl5xifhj0o5" path="res://addons/vs_plugin/3d/deep_parallax.gd" id="2_yc80g"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_7sr23"]
texture = ExtResource("1_g35qb")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_kvisg"]
parameter_name = "DepthTexture"

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_kchos"]
default_input_values = [3, 64.0, 4, 128.0, 9, Vector3(1, 1, 0)]
initialized = true
script = ExtResource("2_yc80g")

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D DepthTexture;
uniform sampler2D tex_frg_3 : source_color;


// DeepParallax
//uniform sampler2D texture_parallax_default: hint_default_black;
uniform float heightmap_scale: hint_range(0.0, 20.0, 0.01) = 5;
uniform vec2 _depth_flip = vec2(1.0, 1.0);
uniform bool flip_heightmap = false;
//uniform sampler2D texture_albedo: source_color;

// Perform deep parallax mapping
void deep_parallax(in vec2 _uv_in, in sampler2D _texture_heightmap, in float depth_scale, in int _min_layers, in int _max_layers, in vec3 vertex, in vec3 normal, in vec3 tangent, in vec3 binormal, in vec3 eyeoffset, out vec2 uv_out) {
	vec3 view_dir = normalize(normalize(-vertex + eyeoffset) * mat3(tangent * _depth_flip.x, -binormal * _depth_flip.y, normal));
	float num_layers = mix(float(_max_layers),float(_min_layers), abs(dot(vec3(0.0, 0.0, 1.0), view_dir)));
	float layer_depth = 1.0 / num_layers;
	float current_layer_depth = 0.0;
	vec2 P = view_dir.xy * heightmap_scale * 0.01;
	vec2 delta = P / num_layers;
	vec2 ofs = _uv_in;
	float depth;
	
	if (!flip_heightmap) {
		depth = 1.0 - texture(_texture_heightmap, ofs).r;
	} else {
		depth = texture(_texture_heightmap, ofs).r;
	}
	
	float current_depth = 0.0;
	while(current_depth < depth) {
		ofs -= delta;
		if (!flip_heightmap) {
			depth = 1.0 - texture(_texture_heightmap, ofs).r;
		} else {
			depth = texture(_texture_heightmap, ofs).r;
		}
		current_depth += layer_depth;
	}
	vec2 prev_ofs = ofs + delta;
	float after_depth  = depth - current_depth;
	
	float before_depth;
	if (!flip_heightmap) {
		before_depth = ( 1.0 - texture(_texture_heightmap, prev_ofs).r  ) - current_depth + layer_depth;
	} else {
		before_depth = texture(_texture_heightmap, prev_ofs).r - current_depth + layer_depth;
	}
	
	float weight = after_depth / (after_depth - before_depth);
	ofs = mix(ofs,prev_ofs,weight);
	uv_out=ofs;
}

//void fragment() {
    //vec2 corrected_uv;
    //deep_parallax(UV, texture_parallax_default, heightmap_scale, 8, 32, VERTEX, NORMAL, TANGENT, BINORMAL, EYE_OFFSET, corrected_uv);
    //ALBEDO = texture(texture_albedo, corrected_uv).rgb;
//}

void fragment() {
	vec2 n_out5p0;
// DeepParallax:5
	float n_in5p3 = 64.00000;
	float n_in5p4 = 128.00000;
	{
		deep_parallax(UV, DepthTexture, heightmap_scale, n_in5p3, n_in5p4, VERTEX, NORMAL, TANGENT, BINORMAL, EYE_OFFSET, n_out5p0);
	}


// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, n_out5p0);


// Output:0
	ALBEDO = vec3(n_out3p0.xyz);


}
"
graph_offset = Vector2(-692.96, 67.9165)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_7sr23")
nodes/fragment/3/position = Vector2(-9.45013, 184.448)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture2DParameter_kvisg")
nodes/fragment/4/position = Vector2(-960, 300)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_kchos")
nodes/fragment/5/position = Vector2(-380, 300)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 5, 1, 5, 0, 3, 0)
